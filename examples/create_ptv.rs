//! Example of creating a ptvoice from scratch.
#![allow(unused)]

use ptcrab::data::WriteTo;
use ptcrab::ptvoice::{PtvEnvelope, PtvUnit, PtvWave, Ptvoice};
use ptcrab::Key;

use anyhow::Result as AnyResult;
use std::env::args;
use std::f32::consts::TAU;
use std::fs::File;

//--------------------------------------------------------------------------------------------------

fn main() -> AnyResult<()> {
    // Create a `PtvWave`: a waveform for a ptvoice unit...
    //----------------------------------------------------------------------------------------------
    // Some basic waveforms are included as they appear in the official ptvoice editor.
    let wave_triangle = PtvWave::default_triangle();
    // Coordinate points can be manually specified...
    let wave_sawtooth = PtvWave::coordinate_from_points(Box::new([(0, 0), (0, 64), (255, -64)]));
    // ... or generated by a function over 0..1 (in this case sine cubed).
    let wave_sine3 = PtvWave::coordinate_from_function(31, |x| (x * TAU).sin().powi(3));
    // Oscillator `(harmonic_num, amplitude)` pairs must be manually specified.
    let wave_osc_1 = PtvWave::oscillator_from_pairs(Box::new([(1, 128), (2, -64), (4, 32)]));

    let ptv = Ptvoice::new(Box::new([PtvUnit {
        wave: Some(wave_sine3),
        ..Default::default()
    }]));

    // If a filename was given, write the ptvoice to the output file. Otherwise, just print it.
    if let Some(filename) = args().nth(1) {
        let mut file = File::create(filename)?;
        ptv.write_to(&mut file)?;
    } else {
        println!("{:?}", ptv);
    }

    Ok(())
}
